@mixin flexbox($inline: false) {
	@if($inline == true) {
		display: -webkit-inline-box;
		display: -webkit-inline-flex;
		display: -moz-inline-flex;
		display: -ms-inline-flebox;
		display: inline-flex;
	}

	@else {
		display: -webkit-box;
		display: -webkit-flex;
		display: -moz-flex;
		display: -ms-flexbox;
		display: flex;
	}
}

%flexbox { @include flexbox(); }

@mixin flex-direction($direction: row) {
	@if $direction == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	}

	@else if $direction == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	}
	
	@else if $direction == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	}
	
	@else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}

	@include vendorize((flex-direction: $direction), webkit moz ms, true);
}

@mixin flex-wrap($value: nowrap) {
	@include vendorize((flex-wrap: $value), webkit moz ms, true);
}

@mixin flex-flow($values: (row nowrap)) {
	@include vendorize((flex-flow: $values), webkit moz ms, true);
}

@mixin flex-order($int: 0) {
	@include vendorize((box-ordinal-group: $int + 1), webkit, false);
	@include vendorize((flex-order: $int), ms, false);
	@include vendorize(order, $int, webkit moz ms, true);
}

@mixin flex-grow($int: 0) {
	@include vendorize((box-flex: $int), webkit, false);
	@include vendorize((flex-positive: $int), ms, false);
	@include vendorize((flex-grow: $int), webkit moz, true);
	
}

@mixin flex-shrink($int: 1) {
	@include vendorize((flex-shrink: $int), webkit moz, true);
	@include vendorize((flex-negative: $int), ms, false);
}

@mixin flex-basis($value: auto) {
	@include vendorize((flex-basis: $value), webkit moz, true);
	@include vendorize((flex-preferred-size: $value), ms, false);
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
	
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	@include vendorize((flex: $fg $fs $fb), webkit moz ms, true);
	@include vendorize((box-flex: $fg-boxflex), false);
}

@mixin justify-content($value: flex-start) {
 	@if $value == flex-start {
 		-webkit-box-pack: start;
 		-ms-flex-pack: start;
 	} 
 	@else if $value == flex-end {
 		-webkit-box-pack: end;
 		-ms-flex-pack: end;
 	} 
 	@else if $value == space-between {
 		-webkit-box-pack: justify;
 		-ms-flex-pack: justify;
 	} 
 	@else if $value == space-around {
 		-ms-flex-pack: distribute;
 	}
 	@else {
 		-webkit-box-pack: $value;
 		-ms-flex-pack: $value;
	}
	 
	@include vendorize((justify-content: $value), webkit moz, true);
}

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	}
	@else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	}
	@else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}

	@include vendorize((align-items: $value), webkit moz);
}

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} 
	@else if $value == flex-end {
		-ms-flex-item-align: end;
	} 
	@else {
		-ms-flex-item-align: $value;
	}

	@include vendorize((align-self: $value), webkit moz);
}

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	}
	@else if $value == flex-end {
		-ms-flex-line-pack: end;
	}
	@else {
		-ms-flex-line-pack: $value;
	}

	@include vendorize(align-content, $value, webkit moz);
}
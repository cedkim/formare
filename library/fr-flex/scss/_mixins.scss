@import './variables';

@mixin fr-create-flex-base-classes() {
  .Flex {
    @include fr-flex-directions();
    @include fr-flex-presets();
    @include fr-flex-grows();

    display: flex !important;
  }

  .InlineFlex {
    display: inline-flex !important;
  }
}

@mixin fr-flex-presets() {
  &-initial {
    flex: 0 1 auto !important;
  }

  &-1 {
    flex: 1 1 0% !important;
  }

  &-auto {
    flex: 1 1 auto !important;
  }

  &-none {
    flex: none !important;
  }
}

@mixin fr-flex-directions() {
  @each $direction, $direction-value in $fr-flex-directions {
    &-#{$direction} {
      flex-direction: $direction-value !important;
    }
  }
}

//- Flex Grow & Shrink
//
@mixin fr-flex-grows() {
  @for $i from 0 through 10 {
    &Grow-#{$i} {
      flex-grow: $i !important;
    }

    &Shrink-#{$i} {
      flex-shrink: $i !important;
    }
  }
}

//

@mixin fr-create-flex-alignment-classes() {
  @each $alignment-axis in $fr-alignment-axes {
    $capitalized-alignment-axis: capitalize($alignment-axis);
    $alignment-stylerule: '' !default;
    $alignment-property: '' !default;

    @each $alignment-type, $alignment-type-map in $fr-alignment-types {
      @if $alignment-type == 'items' {
        // e.g .AlignItems or .JustifyItems
        $alignment-stylerule: '#{$capitalized-alignment-axis}Items';
        $alignment-property: '#{$alignment-axis}-items';
      } @else if $alignment-type == 'content' {
        // e.g .AlignContent or .JustifyContent
        $alignment-stylerule: '#{$capitalized-alignment-axis}Content';
        $alignment-property: '#{$alignment-axis}-content';
      }

      .#{$alignment-stylerule} {
        @include fr-flex-alignment-variants($alignment-type-map, $alignment-property);
      }
    }
  }
}

@mixin fr-flex-alignment-variants($alignment-type-map, $alignment-property) {
  @each $alignment-type-shorthand, $alignment-type-value in $alignment-type-map {
    &-#{$alignment-type-shorthand} {
      #{$alignment-property}: $alignment-type-value !important;
    }
  }
}

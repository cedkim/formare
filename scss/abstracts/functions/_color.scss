@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

//
@function theme-color($color-name: primary) {
  @return map-get($color-themes, $color-name);
}

// Get different shade level of a theme color.
@function theme-color-shade($theme-color: primary, $color-shade-level: 0) {
  @if (variable-defined(theme-color($theme-color))) {
    $theme-color: theme-color($theme-color);
  }

  // $theme-color: theme-color($theme-color);
  $color-shade-percentage: abs($color-shade-level) * 1%;

  @if $color-shade-level > 0 {
    @return shade($theme-color, $color-shade-percentage);
  } @else {
    @return tint($theme-color, $color-shade-percentage);
  }
}

// Theme color
@function primary-color($color-shade-level: 0) {
  @return theme-color-shade(primary, $color-shade-level);
}

@function secondary-color($color-shade-level: 0) {
  @return theme-color-shade(secondary, $color-shade-level);
}

// Shades of gray
@function gray($gray-shade-level: 1000) {
  @return map-get($grays, $gray-shade-level);
}

// (!!!) This is Bootstrap's color-yiq's function, not our own.
// TO-DO: Make our own color contrastor function.
@function get-color-contrast($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @if ($yiq >= $yiq-contrasted-threshold) {
    @return $yiq-text-dark;
  } @else {
    @return $yiq-text-light;
  }
}

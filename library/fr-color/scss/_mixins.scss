@import './variables';

@mixin fr-create-text-color-classes() {
  $stylerules: ('Color');
  @each $stylerule in $stylerules {
    .#{$stylerule} {
      @include fr-create-color-themes($color-type: 'text');
      @include fr-create-color-helpers($color-type: 'text');
    }
  }
}

@mixin fr-create-bg-color-classes() {
  $stylerules: ('BgColor', 'BackgroundColor');

  @each $stylerule in $stylerules {
    .#{$stylerule} {
      @include fr-create-color-themes($color-type: 'background');
      @include fr-create-color-helpers($color-type: 'background');
    }
  }
}

@mixin fr-create-color-themes($color-type) {
  $color-type-property: if($color-type == 'background', 'background-color', 'color');

  @each $color-theme, $color-theme-value in $fr-color-themes {
    &-#{$color-theme} {
      @include fr-create-color-themes-shades($color-type, $color-theme);

      #{$color-type-property}: $color-theme-value !important;
    }
  }
}

@mixin fr-create-color-themes-shades($color-type, $color-theme) {
  @if not $color-theme {
    @error 'You must pass $color-theme value to use this mixin!';
  } @else if not $color-type {
    @error 'You must pass $color-type value to use this mixin!';
  }

  $color-theme-value: fr-color-theme($color-theme);
  $color-type-property: if($color-type == 'background', 'background-color', 'color');

  @for $shade-index from 1 through 100 {
    @if $shade-index % 10 == 0 {
      &-#{$shade-index} {
        #{$color-type-property}: fr-color-shade($color-theme-value, $shade-index) !important;
      }

      &-m#{$shade-index} {
        #{$color-type-property}: fr-color-shade($color-theme-value, -$shade-index) !important;
      }
    }
  }
}

@mixin fr-create-color-helpers($color-type) {
  $color-type-property: if($color-type == 'background', 'background-color', 'color');

  &-transparent {
    #{$color-type-property}: transparent !important;
  }
}

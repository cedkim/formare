//-----------------------------------------------------------------------------
//	F L E X B O X
//
//	This defines a flex container; inline or block depending on the given value. 
//	It enables a flex context for all its direct children.
//
//	Note that CSS columns have no effect on a flex container.
//

@mixin flexbox($inline: false) {
	@if($inline == true) {
		display: -webkit-inline-box;
		display: -webkit-inline-flex;
		display: -moz-inline-flex;
		display: -ms-inline-flebox;
		display: inline-flex;
	}

	@else {
		display: -webkit-box;
		display: -webkit-flex;
		display: -moz-flex;
		display: -ms-flexbox;
		display: flex;
	}
}

%flexbox { @include flexbox(); }

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   D I R E C T I O N
//
//	This establishes the main-axis, thus defining the direction flex items are 
//	placed in the flex container. Flexbox is (aside from optional wrapping) a 
//	single-direction layout concept. Think of flex items as primarily laying 
//	out either in horizontal rows or vertical columns.
//

@mixin flex-direction($direction: row) {
	@if $direction == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	}

	@else if $direction == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	}
	
	@else if $direction == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	}
	
	@else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}

	@include vendorize((flex-direction: $direction), webkit moz ms, true);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   W R A P
//
//	By default, flex items will all try to fit onto one line. You can change 
//	that and allow the items to wrap as needed with this property.
//

@mixin flex-wrap($value: nowrap) {
	@include vendorize((flex-wrap: $value), webkit moz ms, true);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   F L O W
//
//	This is a shorthand flex-direction and flex-wrap properties, which together 
//	define the flex container's main and cross axes. Default is row nowrap.
//

@mixin flex-flow($values: (row nowrap)) {
	@include vendorize((flex-flow: $values), webkit moz ms, true);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   O R D E R
//
//	By default, flex items are laid out in the source order. However, the order 
//	property controls the order in which they appear in the flex container.
//

@mixin flex-order($int: 0) {
	@include vendorize((box-ordinal-group: $int + 1), webkit, false);
	@include vendorize((flex-order: $int), ms, false);
	@include vendorize(order, $int, webkit moz ms, true);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   G R O W
//
//	The 'flex-grow' property sets the flex grow factor. Negative numbers
//	are invalid.
//

@mixin flex-grow($int: 0) {
	@include vendorize((box-flex: $int), webkit, false);
	@include vendorize((flex-positive: $int), ms, false);
	@include vendorize((flex-grow: $int), webkit moz, true);
	
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   S H R I N K
//
//	The 'flex-shrink' property sets the flex shrink factor. Negative numbers
//	are invalid.
//

@mixin flex-shrink($int: 1) {
	@include vendorize((flex-shrink: $int), webkit moz, true);
	@include vendorize((flex-negative: $int), ms, false);
}

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//	F L E X   B A S I S
//
//	The 'flex-basis' property sets the flex basis. Negative lengths are 
//	invalid.
//

@mixin flex-basis($value: auto) {
	@include vendorize((flex-basis: $value), webkit moz, true);
	@include vendorize((flex-preferred-size: $value), ms, false);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X
//
//	The 'flex' property specifies the components of a flexible length: the
//	flex grow factor and flex shrink factor, and the flex basis. When an
//	element is a flex item, 'flex' is consulted instead of the main size
//	property to determine the main size of the element. If an element is
//	not a flex item, 'flex' has no effect.
//
//	$fg = flex-grow, $fs = flex-shrink, $fb = flex-basis
//

@mixin flex($fg: 1, $fs: null, $fb: null) {
	
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	@include vendorize((flex: $fg $fs $fb), webkit moz ms, true);
	@include vendorize((box-flex: $fg-boxflex), false);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   J U S T I F Y   C O N T E N T
//
//	The 'justify-content' property aligns flex items along the main axis
//	of the current line of the flex container. This is done after any flexible
//	lengths and any auto margins have been resolved. Typically it helps distribute
//	extra free space leftover when either all the flex items on a line are
//	inflexible, or are flexible but have reached their maximum size. It also
//	exerts some control over the alignment of items when they overflow the line.

@mixin justify-content($value: flex-start) {
 	@if $value == flex-start {
 		-webkit-box-pack: start;
 		-ms-flex-pack: start;
 	} 
 	@else if $value == flex-end {
 		-webkit-box-pack: end;
 		-ms-flex-pack: end;
 	} 
 	@else if $value == space-between {
 		-webkit-box-pack: justify;
 		-ms-flex-pack: justify;
 	} 
 	@else if $value == space-around {
 		-ms-flex-pack: distribute;
 	}
 	@else {
 		-webkit-box-pack: $value;
 		-ms-flex-pack: $value;
	}
	 
	@include vendorize((justify-content: $value), webkit moz, true);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   A L I G N   I T E M S
//
//	Flex items can be aligned in the cross axis of the current line of the
//	flex container, similar to 'justify-content' but in the perpendicular
//	direction. 'align-items' sets the default alignment for all of the flex
//	container's items, including anonymous flex items.
//

@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	}
	@else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	}
	@else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}

	@include vendorize((align-items: $value), webkit moz);
}

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
//	#	FLEX ALIGN SELF
//
// 'align-self' allows this default alignment to be overridden for individual 
//	flex items. (For anonymous flex items, 'align-self' always matches the 
//	value of 'align-items' on their associated flex container).

@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} 
	@else if $value == flex-end {
		-ms-flex-item-align: end;
	} 
	@else {
		-ms-flex-item-align: $value;
	}

	@include vendorize((align-self: $value), webkit moz);
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//	F L E X   A L I G N   C O N T E N T
//
//	The 'align-content' property aligns a flex container's lines within the
//	flex container when there is extra space in the cross-axis, similar to
//	how 'justify-content' aligns individual items within the main-axis. Note,
//	this property has no effect when the flexbox has only a single line.

@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	}
	@else if $value == flex-end {
		-ms-flex-line-pack: end;
	}
	@else {
		-ms-flex-line-pack: $value;
	}

	@include vendorize(align-content, $value, webkit moz);
}

//-----------------------------------------------------------------------------
/*  ------------------------------------------------------
	Tinter Shader
	
	Set of functions to mix light/black color with 
	the color of your choice to get a different set 
	of color combinations.
------------------------------------------------------  */
@function tint($color, $percentage) {
	@return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
	@return mix(black, $color, $percentage);
}

//	Color Shade Getter

// .rule {
// 	color: theme-color(primary, 600);
// }

@function color-shade($color, $shade-level, $map: $color-shades) {
	@return nested-map-get($map, $color, $shade-level);
}

@function theme-color($theme-color: primary, $shade-level: 600) {
	@return color-shade($theme-color, $shade-level);
}

@function primary-color($shade-level: 600, $color: primary) {
	@return color-shade($color, $shade-level);
}

@function secondary-color($shade-level: 600, $color: secondary) {
	@return color-shade($color, $shade-level);
}

@function gray($shade-level: 600, $color: grays) {
	@return color-shade($color, $shade-level);
}



/*  ------------------------------------------------------
	Color YIQ
	
	Helps finding the correct contrasting color
	by utilizing the YIQ color space. This function
	will return a light or dark contrast color based
	on the specified base color

	(source: bootstrap)
------------------------------------------------------  */

@function color-yiq($color) {
	$r: red($color);
	$g: green($color);
	$b: blue($color);
  
	$yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;
  
	@if ($yiq >= $yiq-contrasted-threshold) {
		@return $yiq-text-dark;
	} @else {
		@return $yiq-text-light;
	}
}